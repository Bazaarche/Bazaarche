import groovy.json.JsonSlurper

buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.25.4'
  }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: "bazaarche.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

android {
  compileSdkVersion 28
  buildToolsVersion '28.0.3'
  defaultConfig {

    def inputFile = new File("appcoins-services.json")
    def json = new JsonSlurper().parseText(inputFile.text)
    buildConfigField 'String', 'DEFAULT_OEM_ADDRESS', "\"" + json.oems.default_address + "\""
    buildConfigField 'String', 'DEFAULT_STORE_ADDRESS', "\"" + json.stores.default_address + "\""

    applicationId "com.hezardastaan.wallet"
    minSdkVersion 21
    targetSdkVersion 28
    versionCode 3
    versionName "1.0.0-132"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    multiDexEnabled = true

    //room schemas location
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }

    buildConfigField 'int', 'DB_VERSION', '5'
    buildConfigField 'int', 'BILLING_SUPPORTED_VERSION', project.BILLING_SUPPORTED_VERSION
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_SYMBOL', project.ROPSTEN_DEFAULT_TOKEN_SYMBOL
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_ADDRESS',
        project.ROPSTEN_DEFAULT_TOKEN_ADDRESS
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_NAME',
        project.MAIN_NETWORK_DEFAULT_TOKEN_NAME
    buildConfigField 'int', 'ROPSTEN_DEFAULT_TOKEN_DECIMALS', project.ROPSTEN_DEFAULT_TOKEN_DECIMALS
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_SYMBOL',
        project.MAIN_NETWORK_DEFAULT_TOKEN_SYMBOL
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_ADDRESS',
        project.MAIN_NETWORK_DEFAULT_TOKEN_ADDRESS
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_NAME', project.ROPSTEN_DEFAULT_TOKEN_NAME
    buildConfigField 'int', 'MAIN_NETWORK_DEFAULT_TOKEN_DECIMALS',
        project.MAIN_NETWORK_DEFAULT_TOKEN_DECIMALS
    buildConfigField 'String', 'REGISTER_PROOF_GAS_LIMIT', project.REGISTER_PROOF_GAS_LIMIT
    buildConfigField 'String', 'PAYMENT_GAS_LIMIT', project.PAYMENT_GAS_LIMIT
    buildConfigField 'String', 'FLURRY_APK_KEY', project.FLURRY_APK_KEY
    buildConfigField 'String', 'PAYMENT_HOST_ROPSTEN_NETWORK', project.PAYMENT_HOST_DEV
    buildConfigField 'String', 'SECOND_PAYMENT_HOST', project.SECOND_PAYMENT_HOST
    buildConfigField 'String', 'TRANSACTION_DETAILS_HOST', project.TRANSACTION_DETAILS_HOST
    buildConfigField 'String', 'TRANSACTION_DETAILS_HOST_ROPSTEN',
        project.TRANSACTION_DETAILS_HOST_ROPSTEN
    buildConfigField 'String', 'RAKAM_BASE_HOST', project.RAKAM_BASE_HOST
    buildConfigField 'String', 'RAKAM_API_KEY', project.RAKAM_API_KEY
    resValue "string", "facebook_app_id", project.FACEBOOK_APP_KEY
    manifestPlaceholders.facebookKey = "${project.FACEBOOK_APP_KEY}"
    manifestPlaceholders.fabricApiKey = "${project.BDS_WALLET_FABRIC_KEY}"
  }

  signingConfigs {
    release {
      storeFile = file(project.BDS_WALLET_STORE_FILE)
      storePassword = project.BDS_WALLET_STORE_PASSWORD
      keyAlias = project.BDS_WALLET_KEY_ALIAS
      keyPassword = project.BDS_WALLET_KEY_PASSWORD
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      buildConfigField 'int', 'LEADING_ZEROS_ON_PROOF_OF_ATTENTION',
          project.LEADING_ZEROS_ON_PROOF_OF_ATTENTION_RELEASE
      buildConfigField 'String', 'BASE_HOST', project.BASE_HOST_PROD
      buildConfigField 'String', 'BACKEND_HOST', project.BACKEND_HOST_PROD
      buildConfigField 'String', 'BDS_BASE_HOST', project.BDS_BASE_HOST_PROD
      buildConfigField 'String', 'MY_APPCOINS_BASE_HOST', project.MY_APPCOINS_BASE_HOST
      buildConfigField 'String', 'PAYMENT_HOST', project.PAYMENT_HOST
      buildConfigField 'String', 'CATAPPULT_BASE_HOST', project.CATAPPULT_BASE_HOST_PROD
      buildConfigField 'String', 'APTOIDE_PKG_NAME', project.APTOIDE_PACKAGE_NAME
      buildConfigField 'String', 'INTERCOM_API_KEY', project.INTERCOM_API_KEY
      buildConfigField 'String', 'INTERCOM_APP_ID', project.INTERCOM_APP_ID
      buildConfigField 'String', 'ADYEN_PUBLIC_KEY', project.ADYEN_PUBLIC_KEY
      manifestPlaceholders.paymentHost = "${project.MANIFEST_PAYMENT_HOST}"
      manifestPlaceholders.secondPaymentHost = "${project.MANIFEST_SECOND_PAYMENT_HOST}"
    }
    debug {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".dev"
      versionNameSuffix ".dev"
      buildConfigField 'int', 'LEADING_ZEROS_ON_PROOF_OF_ATTENTION',
          project.LEADING_ZEROS_ON_PROOF_OF_ATTENTION_DEBUG
      buildConfigField 'String', 'BASE_HOST', project.BASE_HOST_DEV
      buildConfigField 'String', 'BACKEND_HOST', project.BACKEND_HOST_DEV
      buildConfigField 'String', 'BDS_BASE_HOST', project.BDS_BASE_HOST_DEV
      buildConfigField 'String', 'MY_APPCOINS_BASE_HOST', project.MY_APPCOINS_BASE_HOST_DEV
      buildConfigField 'String', 'CATAPPULT_BASE_HOST', project.CATAPPULT_BASE_HOST_DEV
      buildConfigField 'String', 'APTOIDE_PKG_NAME', project.APTOIDE_PACKAGE_NAME_DEV
      buildConfigField 'String', 'PAYMENT_HOST', project.PAYMENT_HOST_DEV
      buildConfigField 'String', 'SECOND_PAYMENT_HOST', project.PAYMENT_HOST_DEV
      buildConfigField 'String', 'INTERCOM_API_KEY', project.INTERCOM_API_KEY_DEV
      buildConfigField 'String', 'INTERCOM_APP_ID', project.INTERCOM_APP_ID_DEV
      buildConfigField 'String', 'ADYEN_PUBLIC_KEY', project.ADYEN_PUBLIC_KEY_DEV
      manifestPlaceholders.paymentHost = "${project.MANIFEST_PAYMENT_HOST_DEV}"
      manifestPlaceholders.secondPaymentHost = "${project.MANIFEST_PAYMENT_HOST_DEV}"
      applicationVariants.all { variant -> renameArtifact(defaultConfig)
      }
    }
  }
  packagingOptions {
    exclude 'META-INF/NOTICE' // will not include NOTICE file
    exclude 'META-INF/LICENSE' // will not include LICENSE file
    // as noted by @Vishnuvathsan you may also need to include
    // variations on the file name. It depends on your dependencies.
    // Some other common variations on notice and license file names
    //exclude 'META-INF/notice'
    //exclude 'META-INF/notice.txt'
    //exclude 'META-INF/license'
    //exclude 'META-INF/license.txt'
  }
  lintOptions {
    abortOnError false
  }
  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }
}

dependencies {
  // Etherium client
  implementation "org.web3j:core:$project.web3jVersion"
  // Http client
  implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofitVersion"
  implementation "com.squareup.okhttp3:okhttp:$project.okhttpVersion"
  implementation "com.google.code.gson:gson:$project.gsonVersion"
  implementation "com.github.bumptech.glide:glide:$project.glide"
  kapt "com.github.bumptech.glide:compiler:$project.glide"

  implementation "android.arch.lifecycle:runtime:$project.lifecycle"
  implementation "android.arch.lifecycle:extensions:$project.lifecycle"

  implementation "androidx.appcompat:appcompat:$project.androidxAppCompatVersion"
  implementation "androidx.vectordrawable:vectordrawable:$project.androidxVectorDrawableVersion"
  implementation "androidx.recyclerview:recyclerview:$project.androidxViewVersion"
  implementation "androidx.cardview:cardview:$project.androidxViewVersion"
  implementation "androidx.constraintlayout:constraintlayout:$project.androidxConstraintLayoutVersion"
  implementation "androidx.palette:palette:$project.androidxViewVersion"
  implementation "com.google.android.material:material:$project.androidxMaterialVersion"
  implementation "androidx.preference:preference:$project.preferenceLibVersion"

  implementation "androidx.multidex:multidex:$project.multidexVersion"
  // Bar code scanning
  implementation "com.google.zxing:core:$project.zxing"
  implementation "com.google.android.gms:play-services-vision:$project.play_services"

  implementation "com.github.apl-devs:appintro:$project.appintro"
  implementation "com.romandanylyk:pageindicatorview:$project.pageIndicatorViewVersion"
  implementation "com.journeyapps:zxing-android-embedded:$project.zxing_android"
  // ReactiveX
  implementation "io.reactivex.rxjava2:rxjava:$project.rxJavaVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroidVersion"
  // Dagger 2
  // Dagger core
  implementation "com.google.dagger:dagger:$project.dagger"
  kapt "com.google.dagger:dagger-android-processor:$project.dagger"
  kapt "com.google.dagger:dagger-compiler:$project.dagger"
  implementation "com.google.dagger:dagger-android-support:$project.dagger"

  implementation "com.github.walleth.kethereum:erc681:$project.erc681Version"
  // Tests
  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.mockito:mockito-core:$project.mockitoCoreVersion"
  androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
  androidTestImplementation("androidx.test.espresso:espresso-core:3.1.0", {
    exclude group: "androidx.test.espresso", module: "support-annotations"
  })
  androidTestImplementation('tools.fastlane:screengrab:1.1.0', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  // Fabric
  implementation("com.crashlytics.sdk.android:crashlytics:$project.crashlytics_sdk") {
    transitive = true
  }
  implementation "com.flurry.android:analytics:$project.flurry"
  // PW
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation project(":tn")
  implementation "com.jakewharton.rxbinding2:rxbinding:$project.rxbinding"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "com.asfoundation:ethereumj-android:$project.ethereumjSdkVersion"

  implementation "androidx.room:room-runtime:$project.room"
  kapt "androidx.room:room-compiler:$project.room"
  implementation "androidx.room:room-rxjava2:$project.room"

  implementation project(path: ':airdrop')
  implementation "com.asfoundation:applications:$project.asf_applications"
  implementation "com.asfoundation:appcoins-contract-proxy:$project.appcoinsSdkVersion"
  implementation project(path: ':billing')

  implementation "com.phelat:poolakey:1.0.0-alpha02"
  implementation "com.phelat:poolakey-rx:1.0.0-alpha02"

  //adyen dependency
  implementation "com.adyen.checkout:card-ui:$project.adyenVersion"
  implementation "com.adyen.checkout:redirect:$project.adyenVersion"

  // Rx Lifecycle
  implementation "com.trello:rxlifecycle:$project.rxlifecycle"
  // If you want pre-written Activities and Fragments you can subclass as providers
  implementation "com.trello:rxlifecycle-components:$project.rxlifecycle"

  implementation "com.facebook.android:facebook-android-sdk:$project.facebook_sdk"
  implementation "aptoide-client-v8:aptoide-analytics-core:$project.aptoide_analytics"
  implementation project(path: ':appcoinsRewards')
  implementation project(path: ':commons')
  implementation project(path: ':gamification')
  implementation project(path: ':permissions')

  implementation "com.hendraanggrian.material:collapsingtoolbarlayout-subtitle:$project.collapsingtoolbarlayout"
  implementation "com.airbnb.android:lottie:$lottieVersion"
  implementation "com.hbb20:ccp:$cppVersion"
  implementation "androidx.viewpager2:viewpager2:$project.viewPagerVersion"
  // Intercom
  implementation "io.intercom.android:intercom-sdk-base:$project.intercomVersion"
  //Rakam
  implementation "io.rakam:android-sdk:$project.rakam_version"
}

def renameArtifact(defaultConfig) {
  android.applicationVariants.all { variant ->
    variant.outputs.all {
      def formattedDate = new Date().format('yyMMdd-HHmm')
      def fileName = "Bazaarche_V${defaultConfig.versionCode}_${formattedDate}_${variant.name}"
      outputFileName = new File("${fileName}.apk")
    }
  }
}

// execute android tests before realising a new apk
//(tasks.whenTaskAdded { task -> if (task.name == 'assembleRelease') task.dependsOn('test')
//})